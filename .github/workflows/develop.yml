name: Develop Pipeline

run-name: ${{ github.actor }} is deploying to ${{ github.ref_name }} üöÄ

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment to deploy to (folder name on server)'
        required: false
        default: develop
  push:
    branches:
      - develop

jobs:
  ## Two next jobs can be merged, but not a good idea
  # Lint the code before running tests
  lint:
    name: Lint code
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint
  e2e_tests:
    name: Run end-to-end tests
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 45 # Stop job after 45 minutes of inactivity
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Set github user
        run: git config user.email "test@example.com" && git config user.name "CI/CD"
      - name: Install the dependencies
        run: npm ci
      - name: Install playwright
        run: npx playwright install --with-deps
      - name: Run smoke tests
        run: npx playwright test --project=chromium --grep @smoke
      - name: Run non-smoke tests
        run: npx playwright test --project=chromium --grep-invert @smoke

  unit_tests:
    name: Run unit tests
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Set github user
        run: git config --global user.email "test@example.com" && git config --global user.name "CI/CD"
      - name: Install the dependencies
        run: npm ci
      - name: Run unit tests
        run: npm run test --if-present

  build:
    name: Generate build
    timeout-minutes: 10
    needs: [lint, e2e_tests, unit_tests]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Set github user
        run: git config --global user.email "test@example.com" && git config --global user.name "CI/CD"
      - name: Install the dependencies
        run: npm ci
      # Copy local environment variables for Vite build
      - name: Copy and configure env for build
        run: |
          # Copy template env file
          cp .env.development.dist .env
          # Inject build metadata into environment
          echo "VITE_BUILD_DATE=$(date +'%d/%m/%Y %H:%M:%S')" >> "$GITHUB_ENV"
          echo "VITE_BUILD_AUTHOR=${{ github.actor }}" >> "$GITHUB_ENV"
          # Use GitHub token to display collaborators in header
          echo "VITE_GITHUBTOKEN=${{ secrets.POKEMMI_COLABS }}" >> "$GITHUB_ENV"
          # Use GitHub ref name to display branch name in header
          echo "VITE_DEPLOY_BRANCH=${{ github.ref_name }}" >> "$GITHUB_ENV"
          # DB connection string
          echo "VITE_DB_HOST=${{ secrets.DB_HOST }}" >> "$GITHUB_ENV"
          echo "VITE_DB_USER=${{ secrets.DB_USER }}" >> "$GITHUB_ENV"
          echo "VITE_DB_PASS=${{ secrets.DB_PASS }}" >> "$GITHUB_ENV"
          echo "VITE_DB_NAME=${{ secrets.DB_NAME }}" >> "$GITHUB_ENV"
      - name: Create build
        run: npm run build
      - name: Generate artifact
        uses: actions/upload-artifact@v4
        with:
          name: pokemmi-frontend-build
          path: ./dist

  deploy:
    needs: build # Assurez-vous que ce job s'ex√©cute apr√®s le job de build
    runs-on: ubuntu-latest
    env: # D√©finissez vos variables d'environnement ici, en utilisant des secrets
      SSH_PWD: ${{ secrets.SSH_PWD }} # R√©activ√© pour l'authentification par mot de passe
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_SERVER: ${{ secrets.SSH_SERVER }}
      # DEPLOY_PATH n'est plus utilis√© ici
      # DB_HOST, DB_USER, DB_PASS, DB_NAME sont aussi n√©cessaires pour env.php
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASS: ${{ secrets.DB_PASS }}
      DB_NAME: ${{ secrets.DB_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Pour acc√©der √† public/backoffice

      - name: Download frontend build artifact
        uses: actions/download-artifact@v4
        with:
          name: pokemmi-frontend-build # Doit correspondre au nom de l'artefact t√©l√©vers√©
          path: dist # L'artefact sera t√©l√©charg√© dans ./dist/

      - name: Verify SSH Connection Variables
        run: |
          echo "Attempting to use the following SSH connection details:"
          echo "SSH User (from env): $SSH_USER"
          echo "SSH Server (from env): $SSH_SERVER"
          # DO NOT ECHO SSH_PWD or any other sensitive password/token
        shell: bash

      - name: Deploy Frontend (dist/)
        run: |
          echo "--- Deploying frontend from dist/ ---"
          sshpass -p "$SSH_PWD" rsync -Pavz --delete -e "ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30" "${{ github.workspace }}/dist/" "$SSH_USER@$SSH_SERVER:www/develop/"
        shell: bash

      - name: Create config.php with Secrets and .htaccess
        run: |
          API_DIR="${{ github.workspace }}/public/backoffice/api"
          CONFIG_PHP_PATH="$API_DIR/config.php"
          HTACCESS_PATH="$API_DIR/.htaccess"

          echo "Ensuring API directory exists at $API_DIR on runner"
          mkdir -p "$API_DIR"

          echo "Creating $CONFIG_PHP_PATH with embedded secrets on runner"
          # The DB_HOST, DB_USER, DB_PASS, DB_NAME variables are from the job's env context (GitHub secrets)
          cat <<EOF > "$CONFIG_PHP_PATH"
          <?php
          // Dynamically generated by GitHub Actions with embedded secrets.
          // Date: $(date)

          \$DB_HOST = '$DB_HOST';
          \$DB_USER = '$DB_USER';
          \$DB_PASS = '$DB_PASS';
          \$DB_NAME = '$DB_NAME';

          // Require the utility functions and game versions
          require_once __DIR__ . '/config_utils.php';

          // Early exit for debugging if DB_HOST is not effectively set (e.g., secret was empty)
          if (empty(\$DB_HOST)) {
              if (!headers_sent()) {
                  header('Content-Type: application/json');
              }
              echo json_encode([
                  "success" => false,
                  "message" => "Configuration error: DB_HOST is not set. Check GitHub secrets.",
                  "debug_info" => [
                      "reason" => "DB_HOST secret is empty or not set in GitHub Actions.",
                      "db_host_value_checked" => isset(\$DB_HOST) ? \$DB_HOST : 'not_even_set', // Check if var itself is set
                      "php_script_user" => get_current_user(),
                      "php_version" => PHP_VERSION,
                  ]
              ]);
              exit;
          }

          \$conn = new mysqli(\$DB_HOST, \$DB_USER, \$DB_PASS, \$DB_NAME);

          if (\$conn->connect_error) {
              if (!headers_sent()) {
                  header('Content-Type: application/json');
              }
              echo json_encode([
                  "success" => false,
                  "message" => "Database connection failed: " . \$conn->connect_error,
                  "debug_info" => [
                      "db_host_used" => \$DB_HOST, // Safe to log host
                      "db_user_used" => \$DB_USER, // Safe to log user
                      "db_name_used" => \$DB_NAME, // Safe to log db name
                      // DO NOT log \$DB_PASS
                      "error_code" => \$conn->connect_errno,
                      "error_message" => \$conn->connect_error
                  ]
              ]);
              exit;
          }

          // Require the utility functions and game versions
          // require_once __DIR__ . '/config_utils.php';

          // It's a common practice to omit the closing PHP tag ?> at the end of files that only contain PHP code.
          EOF

          echo "Creating $HTACCESS_PATH on runner to protect config.php and config_utils.php"
          cat <<EOF > "$HTACCESS_PATH"
          <Files config.php>
              Require all denied
          </Files>
          <Files config_utils.php>
              Require all denied
          </Files>
          # Also protect env.php in case it's ever accidentally created or for legacy reasons
          <Files env.php>
              Require all denied
          </Files>
          EOF

          echo "Listing contents of $API_DIR on runner to verify creation:"
          ls -la "$API_DIR"
        shell: bash

      - name: Create remote directory for Backoffice
        run: |
          echo "--- Creating remote directory for backoffice ---"
          sshpass -p "$SSH_PWD" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 "$SSH_USER@$SSH_SERVER" "mkdir -p www/develop/public/backoffice"
        shell: bash

      # L'√©tape "Verify SSH Connection Variables before Backoffice Deploy" a √©t√© supprim√©e car redondante.

      - name: Deploy Backoffice (public/backoffice/)
        run: |
          echo "--- Attempting to deploy backoffice ---"
          sshpass -p "$SSH_PWD" rsync -Pavz --delete -e "ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30" "${{ github.workspace }}/public/backoffice/" "$SSH_USER@$SSH_SERVER:www/develop/public/backoffice/"
        shell: bash

      - name: Verify Backoffice API Directory on Server
        run: |
          echo "--- Verifying contents of www/develop/public/backoffice/api/ on server after rsync ---"
          sshpass -p "$SSH_PWD" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 \
            "$SSH_USER@$SSH_SERVER" "ls -la www/develop/public/backoffice/api/"
        shell: bash
