name: Develop Pipeline

run-name: ${{ github.actor }} is deploying to ${{ github.ref_name }} üöÄ

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment to deploy to (folder name on server)'
        required: false
        default: develop
  push:
    branches:
      - develop

jobs:
  ## Two next jobs can be merged, but not a good idea
  # Lint the code before running tests
  lint:
    name: Lint code
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint
  e2e_tests:
    name: Run end-to-end tests
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 45 # Stop job after 45 minutes of inactivity
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Set github user
        run: git config user.email "test@example.com" && git config user.name "CI/CD"
      - name: Install the dependencies
        run: npm ci
      - name: Install playwright
        run: npx playwright install --with-deps
      - name: Run smoke tests
        run: npx playwright test --project=chromium --grep @smoke
      - name: Run non-smoke tests
        run: npx playwright test --project=chromium --grep-invert @smoke

  unit_tests:
    name: Run unit tests
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Set github user
        run: git config --global user.email "test@example.com" && git config --global user.name "CI/CD"
      - name: Install the dependencies
        run: npm ci
      - name: Run unit tests
        run: npm run test --if-present

  build:
    name: Generate build
    timeout-minutes: 10
    needs: [lint, e2e_tests, unit_tests]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Set github user
        run: git config --global user.email "test@example.com" && git config --global user.name "CI/CD"
      - name: Install the dependencies
        run: npm ci
      # Copy local environment variables for Vite build
      - name: Copy and configure env for build
        run: |
          # Copy template env file
          cp .env.development.dist .env
          # Inject build metadata into environment
          echo "VITE_BUILD_DATE=$(date +'%d/%m/%Y %H:%M:%S')" >> "$GITHUB_ENV"
          echo "VITE_BUILD_AUTHOR=${{ github.actor }}" >> "$GITHUB_ENV"
          # Use GitHub token to display collaborators in header
          echo "VITE_GITHUBTOKEN=${{ secrets.POKEMMI_COLABS }}" >> "$GITHUB_ENV"
          # Use GitHub ref name to display branch name in header
          echo "VITE_DEPLOY_BRANCH=${{ github.ref_name }}" >> "$GITHUB_ENV"
          # DB connection string
          echo "VITE_DB_HOST=${{ secrets.DB_HOST }}" >> "$GITHUB_ENV"
          echo "VITE_DB_USER=${{ secrets.DB_USER }}" >> "$GITHUB_ENV"
          echo "VITE_DB_PASS=${{ secrets.DB_PASS }}" >> "$GITHUB_ENV"
          echo "VITE_DB_NAME=${{ secrets.DB_NAME }}" >> "$GITHUB_ENV"
      - name: Create build
        run: npm run build
      - name: Generate artifact
        uses: actions/upload-artifact@v4
        with:
          name: pokemmi-frontend-build
          path: ./dist

  deploy:
    needs: build # Assurez-vous que ce job s'ex√©cute apr√®s le job de build
    runs-on: ubuntu-latest
    env: # D√©finissez vos variables d'environnement ici, en utilisant des secrets
      SSH_PWD: ${{ secrets.YOUR_SSH_PASSWORD_SECRET }} # Remplacez par le nom de votre secret
      SSH_USER: ${{ secrets.YOUR_SSH_USER_SECRET }}   # Remplacez par le nom de votre secret
      SSH_SERVER: ${{ secrets.YOUR_SSH_SERVER_SECRET }} # Remplacez par le nom de votre secret
      DEPLOY_PATH: ${{ secrets.YOUR_DEPLOY_PATH_SECRET }} # Remplacez par le nom de votre secret
      # DB_HOST, DB_USER, DB_PASS, DB_NAME sont aussi n√©cessaires pour env.php
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASS: ${{ secrets.DB_PASS }}
      DB_NAME: ${{ secrets.DB_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Pour acc√©der √† public/backoffice

      - name: Download frontend build artifact
        uses: actions/download-artifact@v4
        with:
          name: pokemmi-frontend-build # Doit correspondre au nom de l'artefact t√©l√©vers√©
          path: dist # L'artefact sera t√©l√©charg√© dans ./dist/

      - name: Deploy Frontend (dist/)
        run: |
          echo "--- Deploying frontend from dist/ ---"
          sshpass -p "$SSH_PWD" rsync -Pavz --delete -e "ssh -o StrictHostKeyChecking=no" "${{ github.workspace }}/dist/" "$SSH_USER@$SSH_SERVER:$DEPLOY_PATH/"
        shell: bash

      - name: Create env.php and .htaccess for Backoffice
        run: |
          API_DIR="${{ github.workspace }}/public/backoffice/api"
          echo "Ensuring API directory exists at $API_DIR"
          mkdir -p "$API_DIR"

          echo "Creating env.php in $API_DIR"
          echo "<?php" > "$API_DIR/env.php"
          echo "putenv('DB_HOST=$DB_HOST');" >> "$API_DIR/env.php"
          echo "putenv('DB_USER=$DB_USER');" >> "$API_DIR/env.php"
          echo "putenv('DB_PASS=$DB_PASS');" >> "$API_DIR/env.php"
          echo "putenv('DB_NAME=$DB_NAME');" >> "$API_DIR/env.php"
          echo "?>" >> "$API_DIR/env.php"

          echo "Creating .htaccess in $API_DIR"
          echo "<Files env.php>" > "$API_DIR/.htaccess"
          echo "    Require all denied" >> "$API_DIR/.htaccess"
          echo "</Files>" >> "$API_DIR/.htaccess"
          echo "<Files config.php>" >> "$API_DIR/.htaccess"
          echo "    Require all denied" >> "$API_DIR/.htaccess"
          echo "</Files>" >> "$API_DIR/.htaccess"

          echo "Listing contents of $API_DIR on runner to verify creation:"
          ls -la "$API_DIR"
        shell: bash

      - name: Deploy Backoffice (public/backoffice/)
        run: |
          echo "--- Attempting to deploy backoffice ---"
          # Create the target directory structure on the server first for public/backoffice
          # This ensures the parent path exists before rsyncing into it.
          sshpass -p "$SSH_PWD" ssh -o StrictHostKeyChecking=no "$SSH_USER@$SSH_SERVER" "mkdir -p $DEPLOY_PATH/public/backoffice"
          
          # Deploy the entire public/backoffice directory. 
          # This will now include the env.php and .htaccess created in the previous step.
          sshpass -p "$SSH_PWD" rsync -Pavz --delete -e "ssh -o StrictHostKeyChecking=no" "${{ github.workspace }}/public/backoffice/" "$SSH_USER@$SSH_SERVER:$DEPLOY_PATH/public/backoffice/"
        shell: bash
