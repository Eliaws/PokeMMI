name: Develop Pipeline

run-name: ${{ github.actor }} is deploying to ${{ github.ref_name }} ðŸš€

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment to deploy to (folder name on server)'
        required: false
        default: develop
  push:
    branches:
      - develop

jobs:
  ## Two next jobs can be merged, but not a good idea
  # Lint the code before running tests
  lint:
    name: Lint code
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint
  e2e_tests:
    name: Run end-to-end tests
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 45 # Stop job after 45 minutes of inactivity
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Set github user
        run: git config user.email "test@example.com" && git config user.name "CI/CD"
      - name: Install the dependencies
        run: npm ci
      - name: Install playwright
        run: npx playwright install --with-deps
      - name: Run smoke tests
        run: npx playwright test --project=chromium --grep @smoke
      - name: Run non-smoke tests
        run: npx playwright test --project=chromium --grep-invert @smoke

  unit_tests:
    name: Run unit tests
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Set github user
        run: git config --global user.email "test@example.com" && git config --global user.name "CI/CD"
      - name: Install the dependencies
        run: npm ci
      - name: Run unit tests
        run: npm run test --if-present

  build:
    name: Generate build
    timeout-minutes: 10
    needs: [lint, e2e_tests, unit_tests]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Set github user
        run: git config --global user.email "test@example.com" && git config --global user.name "CI/CD"
      - name: Install the dependencies
        run: npm ci
      # Copy local environment variables for Vite build
      - name: Copy and configure env for build
        run: |
          # Copy template env file
          cp .env.development.dist .env
          # Inject build metadata into environment
          echo "VITE_BUILD_DATE=$(date +'%d/%m/%Y %H:%M:%S')" >> "$GITHUB_ENV"
          echo "VITE_BUILD_AUTHOR=${{ github.actor }}" >> "$GITHUB_ENV"
          # Use GitHub token to display collaborators in header
          echo "VITE_GITHUBTOKEN=${{ secrets.POKEMMI_COLABS }}" >> "$GITHUB_ENV"
          # Use GitHub ref name to display branch name in header
          echo "VITE_DEPLOY_BRANCH=${{ github.ref_name }}" >> "$GITHUB_ENV"
          # DB connection string
          echo "VITE_DB_HOST=${{ secrets.DB_HOST }}" >> "$GITHUB_ENV"
          echo "VITE_DB_USER=${{ secrets.DB_USER }}" >> "$GITHUB_ENV"
          echo "VITE_DB_PASS=${{ secrets.DB_PASS }}" >> "$GITHUB_ENV"
          echo "VITE_DB_NAME=${{ secrets.DB_NAME }}" >> "$GITHUB_ENV"
      - name: Create build
        run: npm run build
      - name: Generate artifact
        uses: actions/upload-artifact@master
        with:
          name: front-end-build
          path: ./dist

  deploy:
    name: Deploy build to production
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@master
        with:
          name: front-end-build
          # Note: The artifact is downloaded into the current GITHUB_WORKSPACE, 
          # which might be just 'dist'. We need to ensure the PHP files from public/backoffice/api 
          # are also available or deployed separately if not part of the 'dist' artifact.
          # For this example, we assume 'dist' contains the whole frontend and backoffice PHP files are deployed with it.

      - name: Create env.php for database connection
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          echo "<?php" > ${{ github.workspace }}/public/backoffice/api/env.php
          echo "putenv('DB_HOST=${DB_HOST}');" >> ${{ github.workspace }}/public/backoffice/api/env.php
          echo "putenv('DB_USER=${DB_USER}');" >> ${{ github.workspace }}/public/backoffice/api/env.php
          echo "putenv('DB_PASS=${DB_PASS}');" >> ${{ github.workspace }}/public/backoffice/api/env.php
          echo "putenv('DB_NAME=${DB_NAME}');" >> ${{ github.workspace }}/public/backoffice/api/env.php
          echo "?>" >> ${{ github.workspace }}/public/backoffice/api/env.php
          # Ensure the .htaccess file is present in the api directory
          echo "<Files \"env.php\">" > ${{ github.workspace }}/public/backoffice/api/.htaccess
          echo "    Require all denied" >> ${{ github.workspace }}/public/backoffice/api/.htaccess
          echo "</Files>" >> ${{ github.workspace }}/public/backoffice/api/.htaccess
          echo "<Files \"config.php\">" >> ${{ github.workspace }}/public/backoffice/api/.htaccess
          echo "    Require all denied" >> ${{ github.workspace }}/public/backoffice/api/.htaccess

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass
      - name: Deploy via ssh password
        env:
          SSH_PWD: ${{ secrets.SSH_PWD }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_SERVER: ${{ secrets.SSH_SERVER }}

        run: |
          sshpass -p "$SSH_PWD" rsync -Pavz -e "ssh -o StrictHostKeyChecking=no" \
          "${{ github.workspace }}/" "$SSH_USER@$SSH_SERVER:~/www/${{ github.ref_name }}/"
