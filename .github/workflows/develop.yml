name: Develop Pipeline

run-name: ${{ github.actor }} is deploying to ${{ github.ref_name }} ðŸš€

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment to deploy to (folder name on server)'
        required: false
        default: develop
  push:
    branches:
      - develop

jobs:
  ## Two next jobs can be merged, but not a good idea
  # Lint the code before running tests
  lint:
    name: Lint code
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint
  e2e_tests:
    name: Run end-to-end tests
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 45 # Stop job after 45 minutes of inactivity
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Set github user
        run: git config user.email "test@example.com" && git config user.name "CI/CD"
      - name: Install the dependencies
        run: npm ci
      - name: Install playwright
        run: npx playwright install --with-deps
      - name: Run smoke tests
        run: npx playwright test --project=chromium --grep @smoke
      - name: Run non-smoke tests
        run: npx playwright test --project=chromium --grep-invert @smoke

  unit_tests:
    name: Run unit tests
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Set github user
        run: git config --global user.email "test@example.com" && git config --global user.name "CI/CD"
      - name: Install the dependencies
        run: npm ci
      - name: Run unit tests
        run: npm run test --if-present

  build:
    name: Generate build
    timeout-minutes: 10
    needs: [lint, e2e_tests, unit_tests]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Set github user
        run: git config --global user.email "test@example.com" && git config --global user.name "CI/CD"
      - name: Install the dependencies
        run: npm ci
      # Copy local environment variables for Vite build
      - name: Copy and configure env for build
        run: |
          # Copy template env file
          cp .env.development.dist .env
          # Inject build metadata into environment
          echo "VITE_BUILD_DATE=$(date +'%d/%m/%Y %H:%M:%S')" >> "$GITHUB_ENV"
          echo "VITE_BUILD_AUTHOR=${{ github.actor }}" >> "$GITHUB_ENV"
          # Use GitHub token to display collaborators in header
          echo "VITE_GITHUBTOKEN=${{ secrets.POKEMMI_COLABS }}" >> "$GITHUB_ENV"
          # Use GitHub ref name to display branch name in header
          echo "VITE_DEPLOY_BRANCH=${{ github.ref_name }}" >> "$GITHUB_ENV"
          # DB connection string
          echo "VITE_DB_HOST=${{ secrets.DB_HOST }}" >> "$GITHUB_ENV"
          echo "VITE_DB_USER=${{ secrets.DB_USER }}" >> "$GITHUB_ENV"
          echo "VITE_DB_PASS=${{ secrets.DB_PASS }}" >> "$GITHUB_ENV"
          echo "VITE_DB_NAME=${{ secrets.DB_NAME }}" >> "$GITHUB_ENV"
      - name: Create build
        run: npm run build
      - name: Generate artifact
        uses: actions/upload-artifact@v4
        with:
          name: pokemmi-frontend-build
          path: ./dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      SSH_PWD: ${{ secrets.SSH_PWD }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_SERVER: ${{ secrets.SSH_SERVER }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASS: ${{ secrets.DB_PASS }}
      DB_NAME: ${{ secrets.DB_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download frontend build artifact
        uses: actions/download-artifact@v4
        with:
          name: pokemmi-frontend-build
          path: dist

      - name: Verify SSH Connection Variables
        run: |
          echo "Attempting to use the following SSH connection details:"
          echo "SSH User (from env): $SSH_USER"
          echo "SSH Server (from env): $SSH_SERVER"
        shell: bash

      - name: Deploy Frontend (dist/)
        run: |
          echo "--- Deploying frontend from dist/ ---"
          sshpass -p "$SSH_PWD" rsync -Pavz --delete -e "ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30" "${{ github.workspace }}/dist/" "$SSH_USER@$SSH_SERVER:www/develop/"
        shell: bash

      - name: Create remote directory for Backoffice
        run: |
          echo "--- Creating remote directory for backoffice ---"
          sshpass -p "$SSH_PWD" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 "$SSH_USER@$SSH_SERVER" "mkdir -p www/develop/public/backoffice"
        shell: bash

      - name: Deploy Backoffice (public/backoffice/)
        run: |
          echo "--- Attempting to deploy backoffice ---"
          sshpass -p "$SSH_PWD" rsync -Pavz --delete -e "ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30" "${{ github.workspace }}/public/backoffice/" "$SSH_USER@$SSH_SERVER:www/develop/public/backoffice/"
        shell: bash

      - name: Create production config files directly on server
        run: |
          echo "--- Creating production .env and config.php files directly on server ---"
          
          # Create .env file for Node.js on server
          sshpass -p "$SSH_PWD" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 "$SSH_USER@$SSH_SERVER" "cat > www/develop/public/backoffice/.env << 'EOF'
          # Environment variables for backoffice Node.js applications
          # Generated by GitHub Actions on \$(date)
          
          # Database configuration for Node.js (db.js)
          VITE_DB_HOST=${{ secrets.DB_HOST }}
          VITE_DB_USER=${{ secrets.DB_USER }}
          VITE_DB_PASS=${{ secrets.DB_PASS }}
          VITE_DB_NAME=${{ secrets.DB_NAME }}
          
          # Node.js production settings
          NODE_ENV=production
          PORT=3000
          EOF"
          
          # Create config.php file for PHP on server
          sshpass -p "$SSH_PWD" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 "$SSH_USER@$SSH_SERVER" "cat > www/develop/public/backoffice/api/config.php << 'EOF'
          <?php
          // Dynamically generated by GitHub Actions on \$(date)

          // Define database credentials directly from GitHub Secrets
          \\\$DB_HOST = '${{ secrets.DB_HOST }}';
          \\\$DB_USER = '${{ secrets.DB_USER }}';
          \\\$DB_PASS = '${{ secrets.DB_PASS }}';
          \\\$DB_NAME = '${{ secrets.DB_NAME }}';

          // Include shared utilities (sanitize_filename, game_versions array, etc.)
          require_once __DIR__ . '/config_utils.php';

          // Establish database connection
          \\\$conn = new mysqli(\\\$DB_HOST, \\\$DB_USER, \\\$DB_PASS, \\\$DB_NAME);

          // Check connection
          if (\\\$conn->connect_error) {
              error_log(\\\"CRITICAL: Database connection failed for user '\\\$DB_USER' to database '\\\$DB_NAME' on host '\\\$DB_HOST'. Error: \\\" . \\\$conn->connect_error);

              if (!headers_sent()) {
                  header('Content-Type: application/json');
                  http_response_code(500);
              }
              echo json_encode([
                  \\\"success\\\" => false,
                  \\\"message\\\" => \\\"Internal Server Error: Could not connect to the database.\\\"
              ]);
              exit;
          }

          // Set character set to utf8mb4 for proper encoding support
          if (!\\\$conn->set_charset(\\\"utf8mb4\\\")) {
              error_log(\\\"Error loading character set utf8mb4: \\\" . \\\$conn->error);
          }

          ?>
          EOF"
          
          # Create .htaccess files for security
          sshpass -p "$SSH_PWD" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 "$SSH_USER@$SSH_SERVER" "cat > www/develop/public/backoffice/.htaccess << 'EOF'
          <Files .env>
              Require all denied
          </Files>
          <Files env.php>
              Require all denied
          </Files>
          EOF"
          
          sshpass -p "$SSH_PWD" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 "$SSH_USER@$SSH_SERVER" "cat > www/develop/public/backoffice/api/.htaccess << 'EOF'
          <Files config.php>
              Require all denied
          </Files>
          <Files config_utils.php>
              Require all denied
          </Files>
          <Files .env>
              Require all denied
          </Files>
          <Files test_config.php>
              Require all denied
          </Files>
          <Files env.php>
              Require all denied
          </Files>
          EOF"
          
          echo "--- Production config files created successfully ---"
        shell: bash

      - name: Verify Backoffice API Directory on Server
        run: |
          echo "--- Verifying contents of www/develop/public/backoffice/api/ on server ---"
          sshpass -p "$SSH_PWD" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 \
            "$SSH_USER@$SSH_SERVER" "ls -la www/develop/public/backoffice/api/ && echo '--- Content of config.php ---' && head -20 www/develop/public/backoffice/api/config.php"
        shell: bash
