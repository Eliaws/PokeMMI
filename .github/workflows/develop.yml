name: Develop Pipeline

run-name: ${{ github.actor }} is deploying to ${{ github.ref_name }} üöÄ

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment to deploy to (folder name on server)'
        required: false
        default: develop
  push:
    branches:
      - develop

jobs:
  ## Two next jobs can be merged, but not a good idea
  # Lint the code before running tests
  lint:
    name: Lint code
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint
  e2e_tests:
    name: Run end-to-end tests
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 45 # Stop job after 45 minutes of inactivity
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Set github user
        run: git config user.email "test@example.com" && git config user.name "CI/CD"
      - name: Install the dependencies
        run: npm ci
      - name: Install playwright
        run: npx playwright install --with-deps
      - name: Run smoke tests
        run: npx playwright test --project=chromium --grep @smoke
      - name: Run non-smoke tests
        run: npx playwright test --project=chromium --grep-invert @smoke

  unit_tests:
    name: Run unit tests
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Set github user
        run: git config --global user.email "test@example.com" && git config --global user.name "CI/CD"
      - name: Install the dependencies
        run: npm ci
      - name: Run unit tests
        run: npm run test --if-present

  build:
    name: Generate build
    timeout-minutes: 10
    needs: [lint, e2e_tests, unit_tests]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Set github user
        run: git config --global user.email "test@example.com" && git config --global user.name "CI/CD"
      - name: Install the dependencies
        run: npm ci
      # Copy local environment variables for Vite build
      - name: Copy and configure env for build
        run: |
          # Copy template env file
          cp .env.development.dist .env
          # Inject build metadata into environment
          echo "VITE_BUILD_DATE=$(date +'%d/%m/%Y %H:%M:%S')" >> "$GITHUB_ENV"
          echo "VITE_BUILD_AUTHOR=${{ github.actor }}" >> "$GITHUB_ENV"
          # Use GitHub token to display collaborators in header
          echo "VITE_GITHUBTOKEN=${{ secrets.POKEMMI_COLABS }}" >> "$GITHUB_ENV"
          # Use GitHub ref name to display branch name in header
          echo "VITE_DEPLOY_BRANCH=${{ github.ref_name }}" >> "$GITHUB_ENV"
          # DB connection string
          echo "VITE_DB_HOST=${{ secrets.DB_HOST }}" >> "$GITHUB_ENV"
          echo "VITE_DB_USER=${{ secrets.DB_USER }}" >> "$GITHUB_ENV"
          echo "VITE_DB_PASS=${{ secrets.DB_PASS }}" >> "$GITHUB_ENV"
          echo "VITE_DB_NAME=${{ secrets.DB_NAME }}" >> "$GITHUB_ENV"
      - name: Create build
        run: npm run build
      - name: Generate artifact
        uses: actions/upload-artifact@master
        with:
          name: front-end-build
          path: ./dist

  deploy:
    name: Deploy build to production
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Download frontend build artifact
        uses: actions/download-artifact@v3
        with:
          name: pokemmi-frontend-build
          path: dist # Download to a 'dist' subfolder

      - name: Create env.php
        run: |
          # Utiliser ${{ github.workspace }} pour un chemin absolu sur l'ex√©cuteur
          ENV_DIR="${{ github.workspace }}/dist/public/backoffice/api"
          mkdir -p "$ENV_DIR"
          echo "<?php" > "$ENV_DIR/env.php"
          echo "putenv('DB_HOST=${{ secrets.DB_HOST }}');" >> "$ENV_DIR/env.php"
          echo "putenv('DB_USER=${{ secrets.DB_USER }}');" >> "$ENV_DIR/env.php"
          echo "putenv('DB_PASS=${{ secrets.DB_PASS }}');" >> "$ENV_DIR/env.php"
          echo "putenv('DB_NAME=${{ secrets.DB_NAME }}');" >> "$ENV_DIR/env.php"
          echo "?>" >> "$ENV_DIR/env.php"
        shell: bash

      - name: Verify env.php creation on runner
        run: |
          echo "Listing contents of ${{ github.workspace }}/dist/public/backoffice/api/ on runner:"
          ls -la ${{ github.workspace }}/dist/public/backoffice/api/
        shell: bash

      - name: Create .htaccess for API security
        run: |
          HTACCESS_DIR="${{ github.workspace }}/dist/public/backoffice/api"
          mkdir -p "$HTACCESS_DIR" # Assurer que le r√©pertoire existe
          echo "<Files env.php>" > "$HTACCESS_DIR/.htaccess"
          echo "    Require all denied" >> "$HTACCESS_DIR/.htaccess"
          echo "</Files>" >> "$HTACCESS_DIR/.htaccess"
          echo "<Files config.php>" >> "$HTACCESS_DIR/.htaccess" # S'assurer que cette r√®gle est bien ajout√©e au m√™me .htaccess
          echo "    Require all denied" >> "$HTACCESS_DIR/.htaccess"
          echo "</Files>" >> "$HTACCESS_DIR/.htaccess"
        shell: bash

      - name: Deploy to Server
        uses: SamKirkland/FTP-Deploy-Action@4.3.3
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          server-dir: www/develop/ # Target directory on the server
          local-dir: ./dist/ # Source directory from the runner
          # ... (gardez vos exclusions si n√©cessaire)
