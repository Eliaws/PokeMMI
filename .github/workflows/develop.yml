name: Develop Pipeline

run-name: ${{ github.actor }} is deploying to ${{ github.ref_name }} üöÄ

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment to deploy to (folder name on server)'
        required: false
        default: develop
  push:
    branches:
      - develop

jobs:
  ## Two next jobs can be merged, but not a good idea
  # Lint the code before running tests
  lint:
    name: Lint code
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint
  e2e_tests:
    name: Run end-to-end tests
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 45 # Stop job after 45 minutes of inactivity
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Set github user
        run: git config user.email "test@example.com" && git config user.name "CI/CD"
      - name: Install the dependencies
        run: npm ci
      - name: Install playwright
        run: npx playwright install --with-deps
      - name: Run smoke tests
        run: npx playwright test --project=chromium --grep @smoke
      - name: Run non-smoke tests
        run: npx playwright test --project=chromium --grep-invert @smoke

  unit_tests:
    name: Run unit tests
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Set github user
        run: git config --global user.email "test@example.com" && git config --global user.name "CI/CD"
      - name: Install the dependencies
        run: npm ci
      - name: Run unit tests
        run: npm run test --if-present

  build:
    name: Generate build
    timeout-minutes: 10
    needs: [lint, e2e_tests, unit_tests]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Set github user
        run: git config --global user.email "test@example.com" && git config --global user.name "CI/CD"
      - name: Install the dependencies
        run: npm ci
      # Copy local environment variables for Vite build
      - name: Copy and configure env for build
        run: |
          # Copy template env file
          cp .env.development.dist .env
          # Inject build metadata into environment
          echo "VITE_BUILD_DATE=$(date +'%d/%m/%Y %H:%M:%S')" >> "$GITHUB_ENV"
          echo "VITE_BUILD_AUTHOR=${{ github.actor }}" >> "$GITHUB_ENV"
          # Use GitHub token to display collaborators in header
          echo "VITE_GITHUBTOKEN=${{ secrets.POKEMMI_COLABS }}" >> "$GITHUB_ENV"
          # Use GitHub ref name to display branch name in header
          echo "VITE_DEPLOY_BRANCH=${{ github.ref_name }}" >> "$GITHUB_ENV"
          # DB connection string
          echo "VITE_DB_HOST=${{ secrets.DB_HOST }}" >> "$GITHUB_ENV"
          echo "VITE_DB_USER=${{ secrets.DB_USER }}" >> "$GITHUB_ENV"
          echo "VITE_DB_PASS=${{ secrets.DB_PASS }}" >> "$GITHUB_ENV"
          echo "VITE_DB_NAME=${{ secrets.DB_NAME }}" >> "$GITHUB_ENV"
      - name: Create build
        run: npm run build
      - name: Generate artifact
        uses: actions/upload-artifact@v4
        with:
          name: pokemmi-frontend-build
          path: ./dist

  deploy:
    needs: build # Assurez-vous que ce job s'ex√©cute apr√®s le job de build
    runs-on: ubuntu-latest
    env: # D√©finissez vos variables d'environnement ici, en utilisant des secrets
      SSH_PWD: ${{ secrets.SSH_PWD }} # R√©activ√© pour l'authentification par mot de passe
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_SERVER: ${{ secrets.SSH_SERVER }}
      # DEPLOY_PATH n'est plus utilis√© ici
      # DB_HOST, DB_USER, DB_PASS, DB_NAME sont aussi n√©cessaires pour env.php
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASS: ${{ secrets.DB_PASS }}
      DB_NAME: ${{ secrets.DB_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Pour acc√©der √† public/backoffice

      - name: Download frontend build artifact
        uses: actions/download-artifact@v4
        with:
          name: pokemmi-frontend-build # Doit correspondre au nom de l'artefact t√©l√©vers√©
          path: dist # L'artefact sera t√©l√©charg√© dans ./dist/

      - name: Verify SSH Connection Variables
        run: |
          echo "Attempting to use the following SSH connection details:"
          echo "SSH User (from env): $SSH_USER"
          echo "SSH Server (from env): $SSH_SERVER"
          # DO NOT ECHO SSH_PWD or any other sensitive password/token
        shell: bash

      - name: Deploy Frontend (dist/)
        run: |
          echo "--- Deploying frontend from dist/ ---"
          sshpass -p "$SSH_PWD" rsync -Pavz --delete -e "ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30" "${{ github.workspace }}/dist/" "$SSH_USER@$SSH_SERVER:www/develop/"
        shell: bash

      - name: Create env.php and .htaccess for Backoffice
        run: |
          API_DIR="${{ github.workspace }}/public/backoffice/api"
          echo "Ensuring API directory exists at $API_DIR on runner"
          mkdir -p "$API_DIR"

          echo "Creating env.php in $API_DIR on runner"
          echo "<?php" > "$API_DIR/env.php"
          echo "putenv('DB_HOST=$DB_HOST');" >> "$API_DIR/env.php"
          echo "putenv('DB_USER=$DB_USER');" >> "$API_DIR/env.php"
          echo "putenv('DB_PASS=$DB_PASS');" >> "$API_DIR/env.php"
          echo "putenv('DB_NAME=$DB_NAME');" >> "$API_DIR/env.php"
          echo "?>" >> "$API_DIR/env.php"

          echo "Creating .htaccess in $API_DIR on runner"
          # Restore .htaccess rules for env.php and config.php
          echo "<Files env.php>" > "$API_DIR/.htaccess"
          echo "    Require all denied" >> "$API_DIR/.htaccess"
          echo "</Files>" >> "$API_DIR/.htaccess"
          echo "" >> "$API_DIR/.htaccess" # Add a newline
          echo "<Files config.php>" >> "$API_DIR/.htaccess" 
          echo "    Require all denied" >> "$API_DIR/.htaccess"
          echo "</Files>" >> "$API_DIR/.htaccess"

          echo "Listing contents of $API_DIR on runner to verify creation:"
          ls -la "$API_DIR"
        shell: bash

      - name: Create remote directory for Backoffice
        run: |
          echo "--- Creating remote directory for backoffice ---"
          sshpass -p "$SSH_PWD" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 "$SSH_USER@$SSH_SERVER" "mkdir -p www/develop/public/backoffice"
        shell: bash

      # L'√©tape "Verify SSH Connection Variables before Backoffice Deploy" a √©t√© supprim√©e car redondante.

      - name: Deploy Backoffice (public/backoffice/)
        run: |
          echo "--- Attempting to deploy backoffice ---"
          sshpass -p "$SSH_PWD" rsync -Pavz --delete -e "ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30" "${{ github.workspace }}/public/backoffice/" "$SSH_USER@$SSH_SERVER:www/develop/public/backoffice/"
        shell: bash

      - name: Server-Side PHP Check for env.php
        run: |
          echo "--- Performing server-side PHP check for env.php ---"
          # Define CHECK_SCRIPT_CONTENT using a here document for robustness
          CHECK_SCRIPT_CONTENT=$(cat <<\'EOF_PHP_SCRIPT\'
          <?php
          $api_dir = __DIR__;
          $env_file_path = $api_dir . \\\'/env.php\\\';
          $config_file_path = $api_dir . \\\'/config.php\\\';
          $output = [
              \\\'check_script_location\\\' => __FILE__,
              \\\'api_dir_checked\\\' => $api_dir,
              \\\'env_php_path_checked\\\' => $env_file_path,
              \\\'env_php_exists\\\' => file_exists($env_file_path),
              \\\'env_php_is_readable\\\' => is_readable($env_file_path),
              \\\'env_php_owner\\\' => file_exists($env_file_path) ? fileowner($env_file_path) : \\\'n/a\\\',
              \\\'env_php_perms\\\' => file_exists($env_file_path) ? substr(sprintf(\\\'%o\\\', fileperms($env_file_path)), -4) : \\\'n/a\\\',
              \\\'config_php_exists\\\' => file_exists($config_file_path),
              \\\'config_php_is_readable\\\' => is_readable($config_file_path),
              \\\'api_directory_listing_from_check_script\\\' => scandir($api_dir),
              \\\'php_current_user_id\\\' => getmyuid(),
              \\\'php_current_user_name\\\' => get_current_user(),
              \\\'php_version\\\' => PHP_VERSION,
              \\\'open_basedir\\\' => ini_get(\\\'open_basedir\\\') ?: \\\'not_set_or_empty\\\',
          ];
          header(\\\'Content-Type: application/json\\\');
          echo json_encode($output, JSON_PRETTY_PRINT);
          ?>
          EOF_PHP_SCRIPT
          )

          # Create the check script locally on the runner
          echo "$CHECK_SCRIPT_CONTENT" > "${{ github.workspace }}/check_env.php"
          echo "Local check_env.php created."
          ls -la "${{ github.workspace }}/check_env.php"

          # Define remote path for the script
          REMOTE_SCRIPT_PATH="www/develop/public/backoffice/api/check_env.php"

          # Upload the check script to the server
          echo "Uploading check_env.php to $SSH_USER@$SSH_SERVER:$REMOTE_SCRIPT_PATH"
          sshpass -p "$SSH_PWD" rsync -Pavz -e "ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30" "${{ github.workspace }}/check_env.php" "$SSH_USER@$SSH_SERVER:$REMOTE_SCRIPT_PATH"
          echo "Upload complete."

          # Execute the check script on the server
          echo "Executing $REMOTE_SCRIPT_PATH on server:"
          sshpass -p "$SSH_PWD" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 "$SSH_USER@$SSH_SERVER" "php $REMOTE_SCRIPT_PATH" 

          # Clean up the check script from the server
          echo "Cleaning up $REMOTE_SCRIPT_PATH from server."
          sshpass -p "$SSH_PWD" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 "$SSH_USER@$SSH_SERVER" "rm -f $REMOTE_SCRIPT_PATH"
          echo "Cleanup complete."
        shell: bash
