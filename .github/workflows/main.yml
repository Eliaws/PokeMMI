name: Main Pipeline

run-name: ${{ github.actor }} deploy on ${{ github.ref_name }}

on:
  pull_request:
  push:
    branches: [main]

jobs:
  lint:
    name: Lint code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint

  unit_tests:
    name: Unit tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: Install dependencies
        run: npm ci
      - name: Run unit tests
        run: npm run test --if-present

  e2e_tests:
    name: Run end-to-end tests
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: Set GitHub user
        run: git config user.email "test@example.com" && git config user.name "CI/CD"
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright
        run: npx playwright install --with-deps
      - name: Run smoke tests
        run: npx playwright test --project=chromium --grep @smoke
      - name: Run non-smoke tests
        run: npx playwright test --project=chromium --grep-invert @smoke

  migrate_db:
    name: Database migration
    runs-on: ubuntu-latest
    needs: [unit_tests, e2e_tests]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: Install dependencies
        run: npm ci
      - name: Run migrations
        run: npm run migrate --if-present

  build:
    name: Build production assets
    runs-on: ubuntu-latest
    needs: migrate_db
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: Install dependencies
        run: npm ci
      - name: Copy and configure env for build
        run: |
          cp .env.production.dist .env
          echo "VITE_BUILD_DATE=$(date +'%d/%m/%Y %H:%M:%S')" >> .env
          echo "VITE_BUILD_AUTHOR=${{ github.actor }}" >> .env
          echo "VITE_GITHUBTOKEN=${{ secrets.POKEMMI_COLABS }}" >> .env
          echo "VITE_DEPLOY_BRANCH=${{ github.ref_name }}" >> .env
      - name: Build site
        run: npm run build
      - name: Create .htaccess in dist
        run: |
          mkdir -p dist
          cat > dist/.htaccess << 'EOF'
          <Files ".env*">
            Require all denied
          </Files>
          EOF
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: site-dist
          path: dist

  deploy:
    name: Deploy to production
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: site-dist
      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass
      - name: Deploy via rsync
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_SERVER: ${{ secrets.SSH_SERVER }}
          SSH_PWD: ${{ secrets.SSH_PWD }}
        run: |
          sshpass -p "$SSH_PWD" rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no" dist/ "$SSH_USER@$SSH_SERVER:~/www/"
