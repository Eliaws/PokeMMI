name: Main Pipeline

run-name: ${{ github.actor }} deploy on ${{ github.ref_name }} ðŸš€

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  lint:
    name: Lint code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint

  unit_tests:
    name: Unit tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: Install dependencies
        run: npm ci
      - name: Run unit tests
        run: npm run test --if-present

  e2e_tests:
    name: Run end-to-end tests
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: Set GitHub user
        run: git config user.email "test@example.com" && git config user.name "CI/CD"
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright
        run: npx playwright install --with-deps
      - name: Run smoke tests
        run: npx playwright test --project=chromium --grep @smoke
      - name: Run non-smoke tests
        run: npx playwright test --project=chromium --grep-invert @smoke

  migrate_db:
    name: Database migration
    runs-on: ubuntu-latest
    needs: [unit_tests, e2e_tests]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: Install dependencies
        run: npm ci
      - name: Run migrations
        run: npm run migrate --if-present

  build:
    name: Build production assets
    runs-on: ubuntu-latest
    needs: migrate_db
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: Install dependencies
        run: npm ci
      - name: Copy and configure env for build
        run: |
          cp .env.development.dist .env
          echo "VITE_BUILD_DATE=$(date +'%d/%m/%Y %H:%M:%S')" >> .env
          echo "VITE_BUILD_AUTHOR=${{ github.actor }}" >> .env
          echo "VITE_GITHUBTOKEN=${{ secrets.POKEMMI_COLABS }}" >> .env
          echo "VITE_DEPLOY_BRANCH=${{ github.ref_name }}" >> .env
      - name: Build site
        run: npm run build
      - name: Create .htaccess in dist
        run: |
          mkdir -p dist
          cat > dist/.htaccess << 'EOF'
          <Files ".env*">
            Require all denied
          </Files>
          EOF
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: site-dist
          path: dist
  deploy:
    name: Deploy to production
    runs-on: ubuntu-latest
    needs: build
    env:
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_SERVER: ${{ secrets.SSH_SERVER }}
      SSH_PWD: ${{ secrets.SSH_PWD }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASS: ${{ secrets.DB_PASS }}
      DB_NAME: ${{ secrets.DB_NAME }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: site-dist
          path: dist
          
      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass
        
      - name: Create config.php, .env and .htaccess for production
        run: |
          API_DIR="${{ github.workspace }}/public/backoffice/api"
          BACKOFFICE_DIR="${{ github.workspace }}/public/backoffice"
          CONFIG_PHP_PATH="$API_DIR/config.php"
          ENV_PATH="$BACKOFFICE_DIR/.env"
          HTACCESS_PATH="$API_DIR/.htaccess"

          echo "Ensuring directories exist for production deployment"
          mkdir -p "$API_DIR"
          mkdir -p "$BACKOFFICE_DIR"

          echo "Creating production config.php with embedded secrets"
          cat <<EOF > "$CONFIG_PHP_PATH"
          <?php
          // Production config - Generated by GitHub Actions on $(date)

          // Define database credentials directly from GitHub Secrets
          \$DB_HOST = '${{ secrets.DB_HOST }}';
          \$DB_USER = '${{ secrets.DB_USER }}';
          \$DB_PASS = '${{ secrets.DB_PASS }}';
          \$DB_NAME = '${{ secrets.DB_NAME }}';

          // Include shared utilities
          require_once __DIR__ . '/config_utils.php';

          // Establish database connection
          \$conn = new mysqli(\$DB_HOST, \$DB_USER, \$DB_PASS, \$DB_NAME);

          // Check connection
          if (\$conn->connect_error) {
              error_log("CRITICAL: Database connection failed: " . \$conn->connect_error);
              if (!headers_sent()) {
                  header('Content-Type: application/json');
                  http_response_code(500);
              }
              echo json_encode([
                  "success" => false,
                  "message" => "Internal Server Error: Database connection failed."
              ]);
              exit;
          }

          if (!\$conn->set_charset("utf8mb4")) {
              error_log("Error loading character set utf8mb4: " . \$conn->error);
          }
          ?>
          EOF

          echo "Creating production .env for Node.js backoffice"
          cat <<EOF > "$ENV_PATH"
          # Production environment variables - Generated by GitHub Actions on $(date)
          
          # Database configuration for Node.js
          VITE_DB_HOST=${{ secrets.DB_HOST }}
          VITE_DB_USER=${{ secrets.DB_USER }}
          VITE_DB_PASS=${{ secrets.DB_PASS }}
          VITE_DB_NAME=${{ secrets.DB_NAME }}
          
          # Production settings
          NODE_ENV=production
          PORT=3000
          EOF          echo "Creating .htaccess to protect config files"
          cat <<EOF > "$HTACCESS_PATH"
          <Files config.php>
              Require all denied
          </Files>
          <Files config_utils.php>
              Require all denied
          </Files>
          <Files .env>
              Require all denied
          </Files>
          <Files test_config.php>
              Require all denied
          </Files>
          <Files env.php>
              Require all denied
          </Files>
          EOF

          echo "Creating .htaccess in backoffice root"
          cat <<EOF > "$BACKOFFICE_DIR/.htaccess"
          <Files .env>
              Require all denied
          </Files>
          <Files env.php>
              Require all denied
          </Files>
          EOF
        shell: bash
        
      - name: Deploy frontend
        run: |
          echo "--- Deploying frontend ---"
          sshpass -p "$SSH_PWD" rsync -Pavz --delete -e "ssh -o StrictHostKeyChecking=no" \
          "${{ github.workspace }}/dist/" "$SSH_USER@$SSH_SERVER:~/www/"
        shell: bash
        
      - name: Deploy backoffice
        run: |
          echo "--- Deploying backoffice ---"
          sshpass -p "$SSH_PWD" rsync -Pavz --delete -e "ssh -o StrictHostKeyChecking=no" \
          "${{ github.workspace }}/public/backoffice/" "$SSH_USER@$SSH_SERVER:~/www/public/backoffice/"
        shell: bash
